[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/constants.js",
    "content": "// @flow\n/*\n * provides constants to this project\n * @public\n */\n\nexport const DEFAULT_LIMIT = 10;\nexport const DEFAULT_SKIP = 0;\nexport const DEFAULT_SORT = { createdAt: 1 };\nexport const ASC = 'ASC';\nexport const DESC = 'DESC';\nexport const ENCODING = 'utf8';\n\nexport const SRC_DIR = 'src';\nexport const TEST_DIR = '__tests__';\nexport const TEST_GQL_DATA = 'input';\nexport const TEST_EXPECTED = 'output-expected';\nexport const TEST_GENERATED = 'output-generated';\nexport const TEST_GQL_EXTENSION = '.graphql';\n\nexport const INT = 'Int';\nexport const FLOAT = 'Float';\nexport const STRING = 'String';\nexport const ENUM = 'Enum';\nexport const BOOLEAN = 'Boolean';\nexport const BSON_TYPE = 'BSONType';\nexport const REGEX = 'Regex';\nexport const QUERY = 'Query';\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "DEFAULT_LIMIT",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~DEFAULT_LIMIT",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{DEFAULT_LIMIT}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "DEFAULT_SKIP",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~DEFAULT_SKIP",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{DEFAULT_SKIP}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "DEFAULT_SORT",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~DEFAULT_SORT",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{DEFAULT_SORT}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"createdAt\": number}"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "ASC",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~ASC",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{ASC}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "DESC",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~DESC",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{DESC}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "ENCODING",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~ENCODING",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{ENCODING}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "SRC_DIR",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~SRC_DIR",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{SRC_DIR}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "TEST_DIR",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~TEST_DIR",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{TEST_DIR}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "TEST_GQL_DATA",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~TEST_GQL_DATA",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{TEST_GQL_DATA}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "TEST_EXPECTED",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~TEST_EXPECTED",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{TEST_EXPECTED}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "TEST_GENERATED",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~TEST_GENERATED",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{TEST_GENERATED}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "TEST_GQL_EXTENSION",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~TEST_GQL_EXTENSION",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{TEST_GQL_EXTENSION}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "INT",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~INT",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{INT}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "FLOAT",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~FLOAT",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{FLOAT}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "STRING",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~STRING",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{STRING}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "ENUM",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~ENUM",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{ENUM}",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "BOOLEAN",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~BOOLEAN",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{BOOLEAN}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "BSON_TYPE",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~BSON_TYPE",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{BSON_TYPE}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "REGEX",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~REGEX",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{REGEX}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "QUERY",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~QUERY",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/constants.js",
    "importStyle": "{QUERY}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/index.js",
    "content": "// @flow\n\n/**\n * CREATE-GRAPHQL-SERVER-QUERY-ARGUMENTS\n * \n * this module adds query arguments to the schema\n * and maps the query arguments to a mongoDB data access\n *\n */\n\n/* to find this path from various places, return this modules absolute path: */\nexport const modulePath = __dirname;\n\n// prepares all the required queries for a mongoDB access\nexport { prepareQueries } from './model';\n\n// provides a string with required types\n// clones a given inputSchema and enhance it with query arguments\nexport { buildRequiredTypes, enhanceSchemaWithQueryArguments } from './schema';\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "modulePath",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~modulePath",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/index.js",
    "importStyle": "{modulePath}",
    "description": "CREATE-GRAPHQL-SERVER-QUERY-ARGUMENTS\n\nthis module adds query arguments to the schema\nand maps the query arguments to a mongoDB data access",
    "lineNumber": 12,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/model/buildBaseQuery.js",
    "content": "// @flow\nimport cloneDeep from 'lodash.clonedeep';\nimport { merge } from 'lodash';\nimport { buildFilterQuery } from './buildFilterQuery';\n\n/**\n * sets find(queryObject) with provided baseQuery plus additional filters\n * @public\n * @param {object} args - query arguments for the .find() method\n * @return {object} baseQuery - base query for the find method\n */\n\nexport function buildBaseQuery(args: any): any {\n  let query = {};\n\n  // if there is already a baseQuery provided from other model methods\n  // apply the baseQuery to this query as a base\n  if (args && args.baseQuery) {\n    query = cloneDeep(args.baseQuery);\n  }\n\n  // if the user chose further filter criterias, build and merge them here\n  if (args && args.filter) {\n    query = merge(query, buildFilterQuery(args.filter));\n  }\n\n  return query;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/model/buildBaseQuery.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "buildBaseQuery",
    "memberof": "src/model/buildBaseQuery.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/buildBaseQuery.js~buildBaseQuery",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/model/buildBaseQuery.js",
    "importStyle": "{buildBaseQuery}",
    "description": "sets find(queryObject) with provided baseQuery plus additional filters",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "query arguments for the .find() method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "baseQuery - base query for the find method"
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/model/buildFilterQuery.js",
    "content": "// @flow\nimport isArrayLike from 'lodash.isarraylike';\nimport isObject from 'lodash.isobject';\n/*\n * build a query for the type model accessing mongodb\n * @public\n */\n\nexport function buildFilterQuery(args: any): any {\n  const query = {};\n\n  // on no argument return empty query\n  if (!args) {\n    return query;\n  }\n\n  // on primitive types, just return the data as leaf values in the recursion\n  switch (typeof args) {\n    case 'boolean':\n      return args;\n    case 'number':\n      return args;\n    case 'string':\n      return args;\n    case 'function':\n      return args;\n  }\n\n  // on array like types, return the interpreted mapped values.\n  // array elements can be also query objects,\n  // so we have to analyze each one of them first, before we return them\n  // back as an array\n  if (isArrayLike(args) && args.length && args.length > 0) {\n    return args.map(item => buildFilterQuery(item));\n  }\n\n  // on object like types, analyze the graphql provided query arguments...\n  if (isObject(args)) {\n    // get all the keys of the argument\n    const keys = Object.keys(args);\n\n    // analyze all arguments and map them to mongodb query parts\n    keys.forEach(key => {\n      // a key might look like: e.g. \"bodyText_not_starts_with\"\n      // to analyze it, we need to split off the field name from the operation\n      const keyParts = key.split('_');\n\n      // number of keyParts e.g. 4 as a cloned field, as keyParts changes later\n      const length = 0 + keyParts.length;\n\n      // the fieldName is then e.g. \"bodyText\", get the first array element\n      const fieldName = keyParts.shift();\n\n      // the operation is then: e.g. \"not_starts_with\"\n      const operation = keyParts.join('_');\n\n      // the value which was passed in to this operation, might be a deep Object\n      // so it has to be analyzed recursively\n      const value = args[key];\n\n      switch (length) {\n        // if there is only 1 key part provided, it must be one of the special\n        // cases such as AND, NOT NOR, OR,\n        // or the default case, that it had just provided a simple field name\n        case 1:\n          switch (fieldName) {\n            case 'AND':\n              // $and performs a logical AND operation on an array of two or\n              // more expressions, (e.g. <expression1>, <expression2>, etc.)\n              // and selects the documents, that satisfy all the expressions\n              // in the array.\n              //     $and   : [ { tags: \"ssl\" }, { tags: \"security\" } ]\n              query['$and'] = buildFilterQuery(value);\n              break;\n\n            case 'NOT':\n              // $not performs a logical NOT operation on the specified\n              //  <operator-expression> and selects the documents that\n              // do not match the <operator-expression>.\n              // This includes documents that do not contain the field.\n              // db.inventory.find( { price: { $not: { $gt: 1.99 } } } )\n              query['$not'] = buildFilterQuery(value);\n              break;\n\n            case 'NOR':\n              // $nor performs a logical NOR operation on an array of one or\n              // more query expression and selects the documents that fail\n              // all the query expressions in the array.\n              // db.inventory.find({ $nor: [ { price: 1.99 }, { sale: true } ]})\n              query['$nor'] = buildFilterQuery(value);\n              break;\n\n            case 'OR':\n              // $or operator performs a logical OR operation on an array of\n              // two or more <expressions> and selects the documents that\n              // satisfy at least one of the <expressions>.\n              // db.inventory.find({\n              //   $or: [ { quantity: { $lt: 20 } }, { price: 10 } ]\n              // })\n              query['$or'] = buildFilterQuery(value);\n              break;\n\n            default:\n              // the trivial case\n              // fieldName = value\n              query[fieldName] = buildFilterQuery(value);\n              break;\n          }\n          break;\n\n        // if there are more than one keyParts, we know, it must be\n        // one of the following operations,\n        // provided from the graphql schema as filter arguments\n        default:\n          switch (operation) {\n            case 'all':\n              // $all operator selects the documents, where the value of\n              // a field is an array\n              // that contains all the specified elements. To specify an\n              // $all expression\n              //         tags:   {  $all : [ \"ssl\" , \"security\"       ] }\n              //        field:   {  $all : [ <value1> , <value2> ...  ] }\n              query[fieldName] = { $all: buildFilterQuery(value) };\n              break;\n\n            case 'eq':\n              // $eq specifies equality condition. The $eq operator matches\n              // documents where the value of a field equals the specified value\n              // db.inventory.find( { qty: { $eq: 20 } } )\n              query[fieldName] = { $eq: buildFilterQuery(value) };\n              break;\n\n            case 'ne':\n              // $ne selects the documents where the value of the field is\n              // not equal (i.e. !=) to the specified value. This includes\n              // documents that do not contain the field.\n              //        field:   {  $ne : value                        }\n              query[fieldName] = { $ne: buildFilterQuery(value) };\n              break;\n\n            case 'in':\n              // $in operator selects the documents where the value of a\n              // field equals any value\n              // in the specified array.\n              // db.inventory.find( { qty: { $in: [ 5, 15 ] } } )\n              query[fieldName] = { $in: buildFilterQuery(value) };\n              break;\n\n            case 'nin':\n              // $nin selects the documents where:\n              //  * the field value is not in the specified array or\n              //  * the field does not exist.\n              // db.inventory.find( { qty: { $nin: [ 5, 15 ] } } )\n              query[fieldName] = { $nin: buildFilterQuery(value) };\n              break;\n\n            case 'lt':\n              // $lt selects the documents where the value of the field is less\n              // than (i.e. <) the specified value.\n              // db.inventory.find( { qty: { $lt: 20 } } )\n              query[fieldName] = { $lt: buildFilterQuery(value) };\n              break;\n\n            case 'lte':\n              // $lte selects the documents where the value of the field\n              // is less than or equal to (i.e. <=) the specified value.\n              // db.inventory.find( { qty: { $lte: 20 } } )\n              query[fieldName] = { $lte: buildFilterQuery(value) };\n              break;\n\n            case 'gt':\n              // $gt selects those documents where the value of the field\n              // is greater than (i.e. >) the specified value.\n              // db.inventory.find( { qty: { $gt: 20 } } )\n              query[fieldName] = { $gt: buildFilterQuery(value) };\n              break;\n\n            case 'gte':\n              // $gte selects the documents where the value of the field\n              // is greater than or equal to (i.e. >=) a specified value\n              // e.g. value.\n              // db.inventory.find( { qty: { $gte: 20 } } )\n              query[fieldName] = { $gte: buildFilterQuery(value) };\n              break;\n\n            case 'exists':\n              // Syntax: { field: { $exists: <boolean> } }\n              // When <boolean> is true, $exists matches the documents\n              // that contain the field, including documents where the\n              // field value is null.\n              // If <boolean> is false, the query returns only the documents\n              //  that do not contain the field.\n              query[fieldName] = { $exists: buildFilterQuery(value) };\n              break;\n\n            case 'type':\n              // $type selects the documents where the value of the field\n              // is an instance of the specified BSON type.\n              // Querying by data type is useful when dealing with\n              // highly unstructured data where data types are not predictable\n              // { field: { $type: <BSON type number> | <String alias> } }\n              // look for the type: enum BSONType\n              query[fieldName] = { $type: buildFilterQuery(value) };\n              break;\n\n            case 'not_in':\n              // $in operator selects the documents where the value of a\n              // field equals any value\n              // in the specified array. $not inverses\n              // db.inventory.find( { qty: { $in: [ 5, 15 ] } } )\n              query[fieldName] = { $nin: buildFilterQuery(value) };\n              break;\n\n            case 'regex':\n              // in schema defined graphql type:\n              // type regex {\n              //   regex: String\n              //   option: Enum (type option { global, multiline, ...})\n              // }\n              // so we need to map the options first to mongoDB regex options:\n              let options = '';\n              if (value.options) {\n                value.options.forEach(option => {\n                  switch (option) {\n                    case 'global':\n                      options += 'g';\n                      break;\n                    case 'multiline':\n                      options += 'm';\n                      break;\n                    case 'insensitive':\n                      options += 'i';\n                      break;\n                    case 'sticky':\n                      options += 'y';\n                      break;\n                    case 'unicode':\n                      options += 'u';\n                      break;\n                  }\n                });\n              }\n\n              // assign it directly, as deeper structures aren't allowed here\n              query[fieldName] = {\n                $regex: value.regex,\n                $options: options\n              };\n              break;\n\n            case 'contains':\n              // the field contains this string\n              query[fieldName] = {\n                $regex: buildFilterQuery(value)\n              };\n              break;\n\n            case 'starts_with':\n              // the field starts with this string\n              query[fieldName] = {\n                $regex: `^${buildFilterQuery(value)}`,\n                $options: 'im'\n              };\n              break;\n\n            case 'ends_with':\n              // the field ends with this string\n              query[fieldName] = {\n                $regex: `${buildFilterQuery(value)}$`,\n                $options: 'im'\n              };\n              break;\n\n            case 'not_contains':\n              // the field does not contain this string\n              query[fieldName] = {\n                // $not: {\n                $regex: `(?!${buildFilterQuery(value)})`,\n                $options: 'im'\n                // }\n              };\n              break;\n\n            case 'not_starts_with':\n              // the field ends not with this string\n              query[fieldName] = {\n                // $not: {\n                $regex: `^(?!${buildFilterQuery(value)})`,\n                $options: 'im'\n                // }\n              };\n              break;\n\n            case 'not_ends_with':\n              // the field ends with this string\n              query[fieldName] = {\n                // $not: {\n                $regex: `(?!${buildFilterQuery(value)})$`,\n                $options: 'im'\n                // }\n              };\n              break;\n\n            case 'contains_ci':\n              // the field contains this string case-in-sensitive\n              query[fieldName] = {\n                $regex: buildFilterQuery(value),\n                $options: 'im'\n              };\n              break;\n\n            case 'starts_with_ci':\n              // the field starts with this string case-in-sensitive\n              query[fieldName] = {\n                $regex: `^${buildFilterQuery(value)}`,\n                $options: 'im'\n              };\n              break;\n\n            case 'ends_with_ci':\n              // the field ends with this string case-in-sensitive\n              query[fieldName] = {\n                $regex: `${buildFilterQuery(value)}$`,\n                $options: 'im'\n              };\n              break;\n\n            case 'not_contains_ci':\n              // the field does not contain this string case-in-sensitive\n              query[fieldName] = {\n                // $not: {\n                $regex: `(?!${buildFilterQuery(value)})`,\n                $options: 'im'\n                // }\n              };\n              break;\n\n            case 'not_starts_with_ci':\n              // the field starts with this string case-in-sensitive\n              query[fieldName] = {\n                // $not: {\n                $regex: `^(?!${buildFilterQuery(value)})`,\n                $options: 'im'\n                // }\n              };\n              break;\n\n            case 'not_ends_with_ci':\n              // the field ends with this string case-in-sensitive\n              query[fieldName] = {\n                // $not: {\n                $regex: `(?!${buildFilterQuery(value)})$`,\n                $options: 'im'\n                // }\n              };\n              break;\n          }\n      }\n    });\n  }\n\n  return query;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/model/buildFilterQuery.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "buildFilterQuery",
    "memberof": "src/model/buildFilterQuery.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/buildFilterQuery.js~buildFilterQuery",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/model/buildFilterQuery.js",
    "importStyle": "{buildFilterQuery}",
    "description": " ",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "any"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/model/buildLimit.js",
    "content": "// @flow\nimport { DEFAULT_LIMIT } from '../constants';\n\n/*\n * sets the limit of the cursor: .limit(number)\n * @public\n * @param {object} args - query arguments for the .find() method\n * @return {number} limit - number of records to return\n */\n\nexport function buildLimit(args: any): number {\n  if (args.limit) {\n    return args.limit;\n  }\n\n  return DEFAULT_LIMIT;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/model/buildLimit.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "buildLimit",
    "memberof": "src/model/buildLimit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/buildLimit.js~buildLimit",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/model/buildLimit.js",
    "importStyle": "{buildLimit}",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/model/buildSkip.js",
    "content": "// @flow\nimport { DEFAULT_SKIP } from '../constants';\n\n/*\n * sets the skip for the cursor:  .skip(number)\n * @public\n * @param {object} args - query arguments for the .find() method\n * @return {number} skip - number of records to skip\n */\n\nexport function buildSkip(args: any): number {\n  if (args.skip) {\n    return args.skip;\n  }\n\n  return DEFAULT_SKIP;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/model/buildSkip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "buildSkip",
    "memberof": "src/model/buildSkip.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/buildSkip.js~buildSkip",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/model/buildSkip.js",
    "importStyle": "{buildSkip}",
    "description": " ",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/model/buildSortQuery.js",
    "content": "// @flow\nimport { DEFAULT_SORT, DESC } from '../constants';\n\n/**\n * sets the sort query for .sort(keyOrList, direction)\n * @public\n * @param {object} args - query arguments for the .find() method\n * @return {object} sortQuery - sort criteria\n */\n\nexport function buildSortQuery(args: any): any {\n  // keyOrList string | array | object the key or keys for the sort\n  const sortQuery = {};\n\n  // if there is no sort criteria, use at least the order of creation time\n  // which we've stored in the constants as defaults\n  if (!args.orderBy || args.orderBy.length === 0) {\n    return DEFAULT_SORT;\n  }\n\n  // if there are sort criterias from the schema's \"enum <type>Sort\"\n  // sort = sort field name\n  // direction = number ASC => 1, DESC => -1\n  // mongoDB sort directions for ASC = 1, for DESC = -1\n  // if there is no direction provided set default to ASC\n  args.orderBy.forEach(\n    ({ sort, direction }) => (sortQuery[sort] = direction === DESC ? -1 : 1)\n  );\n\n  return sortQuery;\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/model/buildSortQuery.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "buildSortQuery",
    "memberof": "src/model/buildSortQuery.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/buildSortQuery.js~buildSortQuery",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/model/buildSortQuery.js",
    "importStyle": "{buildSortQuery}",
    "description": "sets the sort query for .sort(keyOrList, direction)",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "query arguments for the .find() method"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "sortQuery - sort criteria"
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/model/index.js",
    "content": "// @flow\n/**\n * @module prepareQueries\n * @default\n * prepares all queries and returns the query objects\n */\n\nexport { prepareQueries } from './prepareQueries';\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/model/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/model/prepareQueries.js",
    "content": "// @flow\nimport { buildBaseQuery } from './buildBaseQuery';\nimport { buildSortQuery } from './buildSortQuery';\nimport { buildSkip } from './buildSkip';\nimport { buildLimit } from './buildLimit';\n\n/*\n * prepares the queries for the mongoDB access\n * @public\n * @param {object} args - query arguments for the mongoDB db operations\n * @return {object} queries - all necessary queries\n * @properties {object} baseQuery - base query for the .find() method\n * @properties {object} sortQuery - sort query for the .sort() method\n * @properties {number} skip - number of records to skip .skip() method\n * @properties {number} limit - number of records to return .limit() method\n */\n\nexport function prepareQueries(\n  args: any\n): {\n  baseQuery: any,\n  sortQuery: any,\n  skip: number,\n  limit: number\n} {\n  return {\n    baseQuery: buildBaseQuery(args),\n    sortQuery: buildSortQuery(args),\n    skip: buildSkip(args),\n    limit: buildLimit(args)\n  };\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/model/prepareQueries.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "prepareQueries",
    "memberof": "src/model/prepareQueries.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/model/prepareQueries.js~prepareQueries",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/model/prepareQueries.js",
    "importStyle": "{prepareQueries}",
    "description": " ",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/schema/buildRequiredTypes.js",
    "content": "import { readString } from '../util/read';\nimport path from 'path';\n\n/**\n * reads and graphql file and returns it as a string\n * @param {string} pathToFile - the path of the required \n *   types .graphql file (default)\n * @return {string} requiredTypes - schema containing the required types\n */\n\nexport function buildRequiredTypes(pathToFile: string): any {\n  const filePath = path.join(__dirname, pathToFile || 'requiredTypes.graphql');\n  return readString(filePath);\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/schema/buildRequiredTypes.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "buildRequiredTypes",
    "memberof": "src/schema/buildRequiredTypes.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schema/buildRequiredTypes.js~buildRequiredTypes",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/schema/buildRequiredTypes.js",
    "importStyle": "{buildRequiredTypes}",
    "description": "reads and graphql file and returns it as a string",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pathToFile",
        "description": "the path of the required \n  types .graphql file (default)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "requiredTypes - schema containing the required types"
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/schema/enhanceSchemaWithQueryArguments.js",
    "content": "// @flow\nimport cloneDeep from 'lodash.clonedeep';\n\nimport {\n  getBaseType,\n  buildTypeDefinition,\n  buildField,\n  buildValue,\n  buildArgument,\n  isScalarField\n} from '../util/graphql';\n\nimport {\n  DOCUMENT,\n  OBJECT_TYPE_DEFINITION,\n  INPUT_OBJECT_TYPE_DEFINITION,\n  ENUM_TYPE_DEFINITION,\n  TYPE_EXTENSION_DEFINITION,\n  LIST_TYPE,\n  FIELD_DEFINITION,\n  NAME\n} from 'graphql/language/kinds';\n\nimport {\n  INT,\n  FLOAT,\n  STRING,\n  ENUM,\n  BOOLEAN,\n  BSON_TYPE,\n  REGEX,\n  QUERY\n} from '../constants';\n\nimport { lcFirst } from '../util/capitalization';\n\n/**\n * prepares the schema for the additional query arguments types\n * @public\n * @param {object} inputSchema - the input's schema with all fields\n * @return {object} outputSchema - the enhanced output Schema\n */\n\nexport function enhanceSchemaWithQueryArguments(inputSchema: any): any {\n  const enhancedSchema = cloneDeep(inputSchema);\n  const queryArguments = {};\n\n  if (enhancedSchema.kind === DOCUMENT) {\n    enhancedSchema.definitions\n      .filter(def => def.kind === OBJECT_TYPE_DEFINITION)\n      .forEach(({ fields, name }) => {\n        const TypeName = name.value;\n\n        // get all field definition types\n        const fieldTypes = getFieldTypes(fields);\n\n        // prepare \"filter\" query argument fields for scalar types\n        const filterInputFields = getFilterInputFields(fieldTypes, TypeName);\n\n        // prepare an enum to contain all sortable fields for the orderBy\n        const sortEnumValues = getEnumValues(fieldTypes);\n\n        // prepare \"orderBy\" query argument fields\n        const orderByInputFields = getOrderByInputFields(TypeName);\n\n        if (filterInputFields.length > 0) {\n          const queryFieldName = `${lcFirst(TypeName)}s`;\n          const FilterInputTypeName = `${TypeName}Filter`;\n          const SortEnumTypeName = `${TypeName}Sort`;\n          const OrderByInputTypeName = `${TypeName}OrderBy`;\n\n          addFilterInputType(\n            FilterInputTypeName,\n            filterInputFields,\n            enhancedSchema\n          );\n          addSortEnumType(SortEnumTypeName, sortEnumValues, enhancedSchema);\n          addOrderByInputType(\n            OrderByInputTypeName,\n            orderByInputFields,\n            enhancedSchema\n          );\n\n          queryArguments[queryFieldName] = {\n            filterName: FilterInputTypeName,\n            orderByName: `[${OrderByInputTypeName}!]`\n          };\n        }\n      });\n\n    // add the newly created types to the Query itself,\n    // to make them accessable by users\n    addQueryArguments(enhancedSchema, queryArguments);\n  }\n\n  return enhancedSchema;\n}\n\n/**\n * prepares the orderBy input type\n * @private\n * @param {string} TypeName - the name of the type\n * @return {object} fieldAST - the AST of an input type field\n */\n\nfunction getOrderByInputFields(TypeName) {\n  // prepare \"orderBy\" query argument fields\n  return [\n    buildField('sort', [], `${TypeName}Sort!`),\n    buildField('direction', [], 'Direction = ASC')\n  ];\n}\n\n/**\n * prepare enum values out of field types\n * @private\n * @param {array} fieldTypes - AST array of field definitions\n * @return {object} fieldAST - the AST of enum values\n */\n\nfunction getEnumValues(fieldTypes) {\n  // prepare an enum to contain all sortable fields for the orderBy\n  return fieldTypes\n    .filter(field => field.scalar)\n    .map(field => buildValue(field.name, [], STRING));\n}\n\n/**\n * prepare enum values out of field types\n * @private\n * @param {array} fieldTypes - AST array of field definitions\n * @param {string} TypeName - the name of the type\n * @return {object} fieldAST - the AST of enum values\n */\n\nfunction getFilterInputFields(fieldTypes, TypeName) {\n  // prepare \"filter\" query argument fields for scalar types\n  return fieldTypes\n    .filter(field => field.scalar)\n    .map(field => prepareArgument(field))\n    .reduce((array, field) => array.concat(field), [\n      { [`AND`]: `[${TypeName}Filter!]` },\n      { [`NOR`]: `[${TypeName}Filter!]` },\n      { [`OR`]: `[${TypeName}Filter!]` }\n    ])\n    .map(field => {\n      const name = Object.keys(field)[0];\n      const type = field[name];\n      return buildField(name, [], type);\n    });\n}\n\n/**\n * analyse and identify field information for further processing\n * @private\n * @param {array} fields - AST array of field definitions\n * @return {array} fieldAST - list of field descriptions\n */\n\nfunction getFieldTypes(fields) {\n  return fields.map(field => ({\n    name: field.name.value,\n    type: getBaseType(field.type).name.value,\n    scalar: isScalarField(field)\n  }));\n}\n\n/**\n * registers the \"filter\" input type into the AST\n * @private\n * @param {string} FilterInputTypeName - name of the input field\n * @param {array} filterInputFields - AST array of field definitions\n * @param {object} enhancedSchema - AST of the document\n */\n\nfunction addFilterInputType(\n  FilterInputTypeName,\n  filterInputFields,\n  enhancedSchema\n) {\n  // add \"input <TypeName>Filter\" type to the schema\n  enhancedSchema.definitions.push(\n    buildTypeDefinition(\n      FilterInputTypeName,\n      filterInputFields,\n      INPUT_OBJECT_TYPE_DEFINITION\n    )\n  );\n}\n\n/**\n * registers the \"enum <Type>Sort\" enum type into the AST\n * @private\n * @param {string} SortEnumTypeName - name of the enum field\n * @param {array} sortEnumValues - AST array of field definitions\n * @param {object} enhancedSchema - AST of the document\n */\n\nfunction addSortEnumType(SortEnumTypeName, sortEnumValues, enhancedSchema) {\n  // add \"enum <TypeName>Sort\" type\n  enhancedSchema.definitions.push(\n    buildTypeDefinition(\n      SortEnumTypeName,\n      [],\n      ENUM_TYPE_DEFINITION,\n      sortEnumValues\n    )\n  );\n}\n\n/**\n * registers the \"input <Type>OrderBy\" input type into the AST\n * @private\n * @param {string} OrderByInputTypeName - name of the input field\n * @param {array} orderByInputFields - AST array of field definitions\n * @param {object} enhancedSchema - AST of the document\n */\n\nfunction addOrderByInputType(\n  OrderByInputTypeName,\n  orderByInputFields,\n  enhancedSchema\n) {\n  // add \"input <TypeName>OrderBy\" type\n  enhancedSchema.definitions.push(\n    buildTypeDefinition(\n      OrderByInputTypeName,\n      orderByInputFields,\n      INPUT_OBJECT_TYPE_DEFINITION\n    )\n  );\n}\n\n/**\n * adds the query arguments \"filter\" and \"orderBy\" to the \"extend Query\" type\n * @private\n * @param {object} enhancedSchema - AST document definition, to be enhanced\n * @param {array} queryArguments - dictionary of queryArguments to be added\n */\n\nfunction addQueryArguments(enhancedSchema, queryArguments) {\n  // add the arguments to the Query:\n  // e.g.: tweets(filter: TweetFilter, orderBy: [TweetOrderBy!])\n  enhancedSchema.definitions\n    .filter(\n      def =>\n        def.kind === TYPE_EXTENSION_DEFINITION &&\n        def.definition.kind === OBJECT_TYPE_DEFINITION &&\n        def.definition.name.value === QUERY\n    )\n    .forEach(({ definition }) => {\n      const { fields, name } = definition;\n\n      if (fields && name) {\n        // find the right fields\n        fields\n          // only in field definition, which are a list, such as 'users'\n          .filter(\n            field =>\n              field.type.kind === LIST_TYPE && field.kind === FIELD_DEFINITION\n          )\n          .forEach(field => {\n            // as arguments is a reserved field, we need to rename to args\n            const args = field.arguments;\n\n            const queryArgument = queryArguments[field.name.value];\n            // if we have arguments to add for this type e.g. 'users'\n            if (queryArgument && field.name.kind === NAME && args) {\n              // add \"filter\" query argument\n              args.push(buildArgument('filter', queryArgument.filterName));\n\n              // add \"orderBy\" query argument\n              args.push(buildArgument('orderBy', queryArgument.orderByName));\n            }\n          });\n      }\n    });\n}\n\n/**\n * define the combinations of input and output types\n * depending on the later expected values for the functions\n * @private\n * @param {object} field - field of the type\n * @property {string} name - name of the field\n * @property {string} type - type of the field\n * @return {array} argumentFields - map of arguments and their types\n */\n\nfunction prepareArgument({ name, type }) {\n  switch (type) {\n    case STRING:\n    case ENUM:\n      return [\n        { [`${name}`]: type },\n        { [`${name}_lt`]: type },\n        { [`${name}_lte`]: type },\n        { [`${name}_gt`]: type },\n        { [`${name}_gte`]: type },\n        { [`${name}_eq`]: type },\n        { [`${name}_ne`]: type },\n        { [`${name}_all`]: `[${type}!]` },\n        { [`${name}_in`]: `[${type}!]` },\n        { [`${name}_nin`]: `[${type}!]` },\n        { [`${name}_not_in`]: `[${type}!]` },\n        { [`${name}_exists`]: BOOLEAN },\n        { [`${name}_type`]: BSON_TYPE },\n        { [`${name}_regex`]: REGEX },\n        { [`${name}_contains`]: STRING },\n        { [`${name}_starts_with`]: STRING },\n        { [`${name}_ends_with`]: STRING },\n        { [`${name}_not_contains`]: STRING },\n        { [`${name}_not_starts_with`]: STRING },\n        { [`${name}_not_ends_with`]: STRING },\n        { [`${name}_contains_ci`]: STRING },\n        { [`${name}_starts_with_ci`]: STRING },\n        { [`${name}_ends_with_ci`]: STRING },\n        { [`${name}_not_contains_ci`]: STRING },\n        { [`${name}_not_starts_with_ci`]: STRING },\n        { [`${name}_not_ends_with_ci`]: STRING }\n      ];\n\n    case INT:\n    case FLOAT:\n      return [\n        { [`${name}`]: type },\n        { [`${name}_lt`]: type },\n        { [`${name}_lte`]: type },\n        { [`${name}_gt`]: type },\n        { [`${name}_gte`]: type },\n        { [`${name}_eq`]: type },\n        { [`${name}_ne`]: type },\n        { [`${name}_all`]: `[${type}!]` },\n        { [`${name}_in`]: `[${type}!]` },\n        { [`${name}_nin`]: `[${type}!]` },\n        { [`${name}_not_in`]: `[${type}!]` },\n        { [`${name}_exists`]: BOOLEAN },\n        { [`${name}_type`]: BSON_TYPE }\n      ];\n\n    case BOOLEAN:\n    default:\n      return [\n        { [`${name}`]: type },\n        { [`${name}_eq`]: type },\n        { [`${name}_ne`]: type },\n        { [`${name}_all`]: `[${type}!]` },\n        { [`${name}_in`]: `[${type}!]` },\n        { [`${name}_nin`]: `[${type}!]` },\n        { [`${name}_not_in`]: `[${type}!]` },\n        { [`${name}_exists`]: BOOLEAN },\n        { [`${name}_type`]: BSON_TYPE }\n      ];\n  }\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/schema/enhanceSchemaWithQueryArguments.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "enhanceSchemaWithQueryArguments",
    "memberof": "src/schema/enhanceSchemaWithQueryArguments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schema/enhanceSchemaWithQueryArguments.js~enhanceSchemaWithQueryArguments",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/schema/enhanceSchemaWithQueryArguments.js",
    "importStyle": "{enhanceSchemaWithQueryArguments}",
    "description": "prepares the schema for the additional query arguments types",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "inputSchema",
        "description": "the input's schema with all fields"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "outputSchema - the enhanced output Schema"
    }
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "getOrderByInputFields",
    "memberof": "src/schema/enhanceSchemaWithQueryArguments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schema/enhanceSchemaWithQueryArguments.js~getOrderByInputFields",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-query-arguments/src/schema/enhanceSchemaWithQueryArguments.js",
    "importStyle": null,
    "description": "prepares the orderBy input type ",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "TypeName",
        "description": "the name of the type"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "fieldAST - the AST of an input type field"
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "getEnumValues",
    "memberof": "src/schema/enhanceSchemaWithQueryArguments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schema/enhanceSchemaWithQueryArguments.js~getEnumValues",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-query-arguments/src/schema/enhanceSchemaWithQueryArguments.js",
    "importStyle": null,
    "description": "prepare enum values out of field types ",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldTypes",
        "description": "AST array of field definitions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "fieldAST - the AST of enum values"
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "getFilterInputFields",
    "memberof": "src/schema/enhanceSchemaWithQueryArguments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schema/enhanceSchemaWithQueryArguments.js~getFilterInputFields",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-query-arguments/src/schema/enhanceSchemaWithQueryArguments.js",
    "importStyle": null,
    "description": "prepare enum values out of field types ",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "fieldTypes",
        "description": "AST array of field definitions"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "TypeName",
        "description": "the name of the type"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "fieldAST - the AST of enum values"
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "getFieldTypes",
    "memberof": "src/schema/enhanceSchemaWithQueryArguments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schema/enhanceSchemaWithQueryArguments.js~getFieldTypes",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-query-arguments/src/schema/enhanceSchemaWithQueryArguments.js",
    "importStyle": null,
    "description": "analyse and identify field information for further processing ",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": "AST array of field definitions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "fieldAST - list of field descriptions"
    },
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "addFilterInputType",
    "memberof": "src/schema/enhanceSchemaWithQueryArguments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schema/enhanceSchemaWithQueryArguments.js~addFilterInputType",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-query-arguments/src/schema/enhanceSchemaWithQueryArguments.js",
    "importStyle": null,
    "description": "registers the \"filter\" input type into the AST ",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "FilterInputTypeName",
        "description": "name of the input field"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "filterInputFields",
        "description": "AST array of field definitions"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "enhancedSchema",
        "description": "AST of the document"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "addSortEnumType",
    "memberof": "src/schema/enhanceSchemaWithQueryArguments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schema/enhanceSchemaWithQueryArguments.js~addSortEnumType",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-query-arguments/src/schema/enhanceSchemaWithQueryArguments.js",
    "importStyle": null,
    "description": "registers the \"enum <Type>Sort\" enum type into the AST ",
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "SortEnumTypeName",
        "description": "name of the enum field"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "sortEnumValues",
        "description": "AST array of field definitions"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "enhancedSchema",
        "description": "AST of the document"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "addOrderByInputType",
    "memberof": "src/schema/enhanceSchemaWithQueryArguments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schema/enhanceSchemaWithQueryArguments.js~addOrderByInputType",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-query-arguments/src/schema/enhanceSchemaWithQueryArguments.js",
    "importStyle": null,
    "description": "registers the \"input <Type>OrderBy\" input type into the AST ",
    "lineNumber": 219,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "OrderByInputTypeName",
        "description": "name of the input field"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "orderByInputFields",
        "description": "AST array of field definitions"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "enhancedSchema",
        "description": "AST of the document"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "addQueryArguments",
    "memberof": "src/schema/enhanceSchemaWithQueryArguments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schema/enhanceSchemaWithQueryArguments.js~addQueryArguments",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-query-arguments/src/schema/enhanceSchemaWithQueryArguments.js",
    "importStyle": null,
    "description": "adds the query arguments \"filter\" and \"orderBy\" to the \"extend Query\" type ",
    "lineNumber": 241,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "enhancedSchema",
        "description": "AST document definition, to be enhanced"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "queryArguments",
        "description": "dictionary of queryArguments to be added"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "prepareArgument",
    "memberof": "src/schema/enhanceSchemaWithQueryArguments.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/schema/enhanceSchemaWithQueryArguments.js~prepareArgument",
    "access": "private",
    "export": false,
    "importPath": "create-graphql-server-query-arguments/src/schema/enhanceSchemaWithQueryArguments.js",
    "importStyle": null,
    "description": "define the combinations of input and output types\ndepending on the later expected values for the functions ",
    "lineNumber": 290,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": "field of the type"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of the field"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "type of the field"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "argumentFields - map of arguments and their types"
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/schema/index.js",
    "content": "// @flow\nexport {\n  enhanceSchemaWithQueryArguments\n} from './enhanceSchemaWithQueryArguments';\n\nexport { buildRequiredTypes } from './buildRequiredTypes';\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/schema/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "src/util/capitalization.js",
    "content": "/**\n * converts first character of string to lower case\n * @private\n * @param {string} str - string\n * @return {string} converted_string - first character is lower case\n */\n\nexport function lcFirst(str) {\n  return str[0].toLowerCase() + str.substring(1);\n}\n\n/**\n * converts first character of string to upper case\n * @private\n * @param {string} str - string\n * @return {string} converted_string - first character is upper case\n */\n\nexport function ucFirst(str) {\n  return str[0].toUpperCase() + str.substring(1);\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/util/capitalization.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "lcFirst",
    "memberof": "src/util/capitalization.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/capitalization.js~lcFirst",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/capitalization.js",
    "importStyle": "{lcFirst}",
    "description": "converts first character of string to lower case",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "converted_string - first character is lower case"
    }
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "ucFirst",
    "memberof": "src/util/capitalization.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/capitalization.js~ucFirst",
    "access": "private",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/capitalization.js",
    "importStyle": "{ucFirst}",
    "description": "converts first character of string to upper case",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "converted_string - first character is upper case"
    }
  },
  {
    "__docId__": 101,
    "kind": "file",
    "name": "src/util/graphql.js",
    "content": "import { Kind } from 'graphql';\nimport includes from 'lodash.includes';\n\nexport const SCALAR_TYPE_NAMES = ['Int', 'Float', 'String', 'Boolean', 'ID', 'ObjID'];\n\nexport function getBaseType(type) {\n  if (type.kind === 'ListType' || type.kind === 'NonNullType') {\n    return getBaseType(type.type);\n  }\n  return type;\n}\n\nexport function argumentsToObject(argumentsAst) {\n  const result = {};\n  argumentsAst.forEach(argument => {\n    result[argument.name.value] = argument.value.value;\n  });\n  return result;\n}\n\nexport function isScalarField(field) {\n  return includes(SCALAR_TYPE_NAMES, getBaseType(field.type).name.value);\n}\n\nexport function buildName(name) {\n  return { kind: 'Name', value: name };\n}\n\nexport function buildTypeDefinition(\n  name,\n  fields,\n  kind = 'ObjectTypeDefinition',\n  values = []\n) {\n  return {\n    kind,\n    name: buildName(name),\n    interfaces: [],\n    directives: [],\n    fields,\n    values\n  };\n}\n\nexport function buildTypeExtension(type) {\n  return {\n    kind: Kind.TYPE_EXTENSION_DEFINITION,\n    definition: type\n  };\n}\n\nexport function buildTypeReference(name) {\n  if (name[name.length - 1] === '!') {\n    return {\n      kind: 'NonNullType',\n      type: buildTypeReference(name.substring(0, name.length - 1))\n    };\n  }\n\n  if (name[0] === '[' && name[name.length - 1] === ']') {\n    return {\n      kind: 'ListType',\n      type: buildTypeReference(name.substring(1, name.length - 1))\n    };\n  }\n\n  return {\n    kind: 'NamedType',\n    name: buildName(name)\n  };\n}\n\nexport function buildField(name, args, typeName) {\n  return {\n    kind: 'FieldDefinition',\n    name: buildName(name),\n    arguments: args,\n    type: buildTypeReference(typeName)\n  };\n}\n\nexport function buildValue(name, args) {\n  return {\n    kind: 'EnumValueDefinition',\n    name: buildName(name),\n    arguments: args\n  };\n}\n\nexport function buildArgument(name, type) {\n  return {\n    kind: 'InputValueDefinition',\n    name: buildName(name),\n    type: buildTypeReference(type),\n    defaultValue: null,\n    directives: []\n  };\n}\n\nexport function addPaginationArguments(field) {\n  field.arguments.push(buildArgument('lastCreatedAt', 'Float'));\n  field.arguments.push(buildArgument('limit', 'Int'));\n}\n\n// Apply all the directives that modify the field's schema. At this stage\n// this is simply the pagination directives, which add pagination arguments\n// to the field.\nexport function applyCustomDirectives(field) {\n  field.directives.forEach(directive => {\n    const directiveName = directive.name.value;\n    const isPaginated = includes(\n      ['hasMany', 'hasAndBelongsToMany', 'belongsToMany'],\n      directiveName\n    );\n    if (isPaginated) {\n      addPaginationArguments(field);\n    }\n  });\n}\n\nexport function idArgument() {\n  return buildArgument('id', 'ObjID!');\n}\n\nexport function getType(level) {\n  if (level.kind === 'NamedType') {\n    return level.name.value;\n  }\n\n  if (level.type) {\n    return getType(level.type);\n  }\n\n  return '';\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/util/graphql.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 102,
    "kind": "variable",
    "name": "SCALAR_TYPE_NAMES",
    "memberof": "src/util/graphql.js",
    "static": true,
    "longname": "src/util/graphql.js~SCALAR_TYPE_NAMES",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{SCALAR_TYPE_NAMES}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "function",
    "name": "getBaseType",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~getBaseType",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{getBaseType}",
    "description": "",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "argumentsToObject",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~argumentsToObject",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{argumentsToObject}",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "argumentsAst",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "isScalarField",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~isScalarField",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{isScalarField}",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "buildName",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~buildName",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{buildName}",
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"kind\": string, \"value\": *}"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "buildTypeDefinition",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~buildTypeDefinition",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{buildTypeDefinition}",
    "description": "",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fields",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "undefined",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "undefined",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"kind\": *, \"name\": *, \"interfaces\": *, \"directives\": *, \"fields\": *, \"values\": *}"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "buildTypeExtension",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~buildTypeExtension",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{buildTypeExtension}",
    "description": "",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"kind\": *, \"definition\": *}"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "buildTypeReference",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~buildTypeReference",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{buildTypeReference}",
    "description": "",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"kind\": string, \"name\": *}"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "buildField",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~buildField",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{buildField}",
    "description": "",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "typeName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"kind\": string, \"name\": *, \"arguments\": *, \"type\": *}"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "buildValue",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~buildValue",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{buildValue}",
    "description": "",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"kind\": string, \"name\": *, \"arguments\": *}"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "buildArgument",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~buildArgument",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{buildArgument}",
    "description": "",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"kind\": string, \"name\": *, \"type\": *, \"defaultValue\": *, \"directives\": *}"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "addPaginationArguments",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~addPaginationArguments",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{addPaginationArguments}",
    "description": "",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "applyCustomDirectives",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~applyCustomDirectives",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{applyCustomDirectives}",
    "description": "",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "field",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "idArgument",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~idArgument",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{idArgument}",
    "description": "",
    "lineNumber": 121,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "getType",
    "memberof": "src/util/graphql.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/graphql.js~getType",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/graphql.js",
    "importStyle": "{getType}",
    "description": "",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "level",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/util/read.js",
    "content": "import fs from 'fs';\nimport { parse } from 'graphql';\nimport { parse as recastParse } from 'recast';\nimport * as babylon from 'babylon';\n\n/**\n * reads a .graphql file and parses the file\n * @param {string} path - path of the graphql file\n * @return {object} schemaObject - returns a parsed schema file\n */\n\nexport default function readInput(path) {\n  return parse(fs.readFileSync(path, 'utf8'));\n}\n\n/**\n * reads a .graphql file\n * @param {string} path - path of the graphql file\n * @return {string} schemaObject - returns a schema file\n */\n\nexport function readString(path) {\n  return fs.readFileSync(path, 'utf8');\n}\n\nconst babylonParser = {\n  parse(code) {\n    return babylon.parse(code, {\n      sourceType: 'module',\n      plugins: ['objectRestSpread']\n    });\n  }\n};\n\n/**\n * Take a template, replacing each replacement.\n * @param {string} template - template\n * @param {string} replacements - replacements within the template\n * @return {object} codeAST - parsed code\n */\n\nexport function templateToAst(template, replacements) {\n  const source = Object.keys(replacements).reduce(\n    (string, key) => string.replace(new RegExp(key, 'g'), replacements[key]),\n    template\n  );\n\n  return recastParse(source, { parser: babylonParser });\n}\n",
    "static": true,
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/src/util/read.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "readInput",
    "memberof": "src/util/read.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/read.js~readInput",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/read.js",
    "importStyle": "readInput",
    "description": "reads a .graphql file and parses the file",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "path of the graphql file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "schemaObject - returns a parsed schema file"
    }
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "readString",
    "memberof": "src/util/read.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/read.js~readString",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/read.js",
    "importStyle": "{readString}",
    "description": "reads a .graphql file",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "path of the graphql file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "schemaObject - returns a schema file"
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "babylonParser",
    "memberof": "src/util/read.js",
    "static": true,
    "longname": "src/util/read.js~babylonParser",
    "access": "public",
    "export": false,
    "importPath": "create-graphql-server-query-arguments/src/util/read.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"parse\": function}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "templateToAst",
    "memberof": "src/util/read.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/read.js~templateToAst",
    "access": "public",
    "export": true,
    "importPath": "create-graphql-server-query-arguments/src/util/read.js",
    "importStyle": "{templateToAst}",
    "description": "Take a template, replacing each replacement.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "template",
        "description": "template"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "replacements",
        "description": "replacements within the template"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "codeAST - parsed code"
    }
  },
  {
    "kind": "index",
    "content": "[![npm version](https://badge.fury.io/js/create-graphql-server-query-arguments.svg)](http://badge.fury.io/js/create-graphql-server-query-arguments) [![Build Status](https://travis-ci.org/tobkle/create-graphql-server-query-arguments.svg?branch=master)](https://travis-ci.org/tobkle/create-graphql-server-query-arguments) [![Coverage Status](https://coveralls.io/repos/github/tobkle/create-graphql-server-query-arguments/badge.svg?branch=master)](https://coveralls.io/github/tobkle/create-graphql-server-query-arguments?branch=master)\n\n# create-graphql-server-query-arguments\n\nBuild query arguments for filter and orderBy MongoDB queries.\n\n** This is still under development **\n** TODO: prepare proper end-to-end test cases for the different filters **\n\n## Purpose\nYou build a GraphQL server with the npm package \"create-graphql-server\", which serves as a backend to web applications. This \"create-graphql-server\" generates schemas, resolvers and models for an express-js server.\n\nAs soon as you are building the web application on top of this server, you want to access this backend server with specific GraphQL queries. Sometimes you want to set filters, to get just filtered records. Sometimes you want to sort data by different fields in ascending or descending order. Sometimes you want just pages of data with the first ten data records, or just the second page after the first ten records and so on.\n\nIn order to enable such accesses to your GraphQL server backend, the schema needs to provide query arguments such as: \n* filter\n* orderBy\n* limit\n* skip\n\nTODO: as enhanced version of limit and skip:\n* first \n* before \n* last\n* after\n\nAdditionally, your data model must know, how to map these query arguments into valid database queries for the mongoDB database.\n\nThat's the purpose of this module. \n* it provides a function for the schema generator, to generate additional query arguments\n* it provides a function for basic types for all arguments later\n* it provides a function for the data model, to map query arguments, into a database query\n\nGraphQL query argument to mongoDB mapper:\n```javascript\nconst { baseQuery, sortQuery, skip, limit} = prepareQueries( query_arguments )\n```\n\nGraphQL schema Query argument generator:\n```javascript\nbuildRequiredTypes();\n```\n\nGraphQL schema Query argument generator:\n```javascript\nconst enhancedOutputSchema = enhanceSchemaWithQueryArguments( inputSchema );\n```\n\nIt provides the following query arguments:\n\n### orderBy\nAll fields of the type definitions are automatically added to the orderBy sort field selection, except for associations to other types.\n\n### limit\nA limit argument is added, to choose the number of documents/records the query should return.\n\n### skip\nA skip argument is added, to skip a number of found records, not to be returned by the query.\n\n### filter\nThe following filter query arguments are added to list types, which you can use to build complex queries:\n* eq\n* all\n* ne\n* in\n* nin\n* lt\n* lte\n* gt\n* gte\n* regex\n* contains\n* starts_with\n* ends_with\n* not_contains\n* not_starts_with\n* not_ends_with\n* not_in\n* exists\n* type\n* AND\n* NOT\n* NOR\n* OR\n\n## Installation\n\n### Installation Part 1 -- add the module to create-graphql-server project\n\n```bash\nyarn add create-graphql-server-query-arguments\n```\n\n### Installation Part 2 -- add it to the server for the mongoDB accesses\nAdd this module to your express server in \"create-graphql-server/skel/server/index.js\" and provide it to your data model by:\n```javascript\n...\nimport { prepareQueries } from 'create-graphql-server-query-arguments';\n...\n```\n\n... and also in skel/server/index.js add it it your your data model context by...\n```javascript\n...\napp.use('/graphql', (req, res, next) => {\n  passport.authenticate('jwt', { session: false }, (err, me) => {\n    req.context = addModelsToContext({\n      db, pubsub, me, UserCollection, log, prepareQueries    // <===\n    });\n    graphqlExpress(() => {\n\t\t...\n    })\n  });\n})\n...\n```\n\nNow you can access it in your data models with \"this.context.prepareQueries\":\n```javascript\nfind(args, me, resolver) {\n  const { baseQuery, sortQuery, skip, limit} = this.context.prepareQueries( args ); // <===\n  const authQuery = queryForRoles(/* auth logic here */);\n  const finalQuery = { ...baseQuery, ...authQuery };\n  return this.collection\n    .find(finalQuery)\n    .sort(sortQuery)\n    .skip(skip)\n    .limit(limit)\n    .toArray();\n}\n```\nBe sure, that also the resolver(s) pass on all \"args\" to your model method \"find\".\n\nAdd these adjustments also to your: \"test/output-app/server/index.js\", otherwise your test runs will fail, as it compares the generated app files from \"skel\" with this \"output-app\" files.\n\n### Installation Part 3 -- General Type Definitions for all arguments, but can be defined only once\n\nadd to file \"skel/schema/index.js\"\n```javascript\n...\nimport { buildRequiredTypes } from 'create-graphql-server-query-arguments'; // <=== add this line\n...\nconst typeDefs = [`\n  scalar ObjID\n\n  type Query {\n    # A placeholder, please ignore\n    __placeholder: Int\n  }\n\n  type Mutation {\n    # A placeholder, please ignore\n    __placeholder: Int\n  }\n\n  type Subscription {\n    # A placeholder, please ignore\n    __placeholder: Int\n  }\n`];\n\ntypeDefs.push(buildRequiredTypes()); // <=== add this line\n\nexport default typeDefs;\n...\n```\nCaution: Do the same again in the \"test/output-app/schema/index.js\" to have proper test runs.\n\n### Installation Part 4 -- Generator for Schema for individual argument type definitions\nAdd to file \"generate/index.js\" the following two statements:\n```javascript\n...\nimport { \n\tenhanceSchemaWithQueryArguments \n} from 'create-graphql-server-query-arguments'; // <===\n\nexport default function generate(inputSchemaStr) {\n  const inputSchema = parse(inputSchemaStr);\n  const type = inputSchema.definitions[0];\n  const TypeName = type.name.value;\n  const typeName = lcFirst(TypeName);\n  const outputSchema = generateSchema(inputSchema);\n  const enhancedSchema = enhanceSchemaWithQueryArguments(outputSchema); // <=== \n...\n}\n```\n\nAdd those types to your outputSchema.\n\n\n\n## Documentation\n[API Documentation](https://tobkle.github.io/create-graphql-server-query-arguments/)\n\n\n## Tests\n```bash\nyarn test\n```\n\n## Contributing\nIn lieu of a formal style guide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code.\n\n\n",
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"create-graphql-server-query-arguments\",\n  \"version\": \"0.0.4\",\n  \"description\": \"build query arguments\",\n  \"main\": \"index.js\",\n  \"repository\": \"https://github.com/tobkle/create-graphql-server-query-arguments\",\n  \"author\": \"Tobias Klemmer <tobias@klemmer.info>\",\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"create-graphql-server\",\n    \"query\",\n    \"arguments\"\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/tobkle/create-graphql-server-query-arguments/issues\"\n  },\n  \"options\": {\n    \"mocha\": \"--require ./resources/mocha-bootload --check-leaks --full-trace src/**/__tests__/**/*-test.js\"\n  },\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run check && npm run testonly\",\n    \"testonly\": \"babel-node ./node_modules/.bin/_mocha $npm_package_options_mocha\",\n    \"t\": \"babel-node ./node_modules/.bin/_mocha --require ./resources/mocha-bootload\",\n    \"lint\": \"eslint --fix src || (printf '\\\\033[33mTry: \\\\033[7m npm run lint -- --fix \\\\033[0m\\\\n' && exit 1)\",\n    \"check\": \"flow check\",\n    \"check-cover\": \"for file in {src/*.js,src/**/*.js}; do echo $file; flow coverage $file; done\",\n    \"build\": \"babel src --optional runtime --ignore __tests__ --out-dir dist/ && cp package.json dist/ && npm run build-dot-flow\",\n    \"build-dot-flow\": \"find ./src -name '*.js' -not -path '*/__tests__*' | while read filepath; do cp $filepath `echo $filepath | sed 's/\\\\/src\\\\//\\\\/dist\\\\//g'`.flow; done\",\n    \"watch\": \"babel-node ./resources/watch.js\",\n    \"cover\": \"babel-node ./node_modules/.bin/isparta cover --root src --report html _mocha -- $npm_package_options_mocha\",\n    \"cover:lcov\": \"babel-node ./node_modules/.bin/isparta cover --root src --report lcovonly _mocha -- $npm_package_options_mocha\",\n    \"preversion\": \". ./resources/checkgit.sh && npm test\",\n    \"prepublish\": \". ./resources/prepublish.sh\",\n    \"gitpublish\": \". ./resources/gitpublish.sh\",\n    \"prettier\": \"node_modules/.bin/prettier src/**/**/*.js --write\",\n    \"esdoc\": \"node_modules/.bin/esdoc -c .esdoc.json\",\n    \"debug\": \"babel-node --inspect src/__tests__/debug\",\n    \"nodemon\": \"nodemon -L --watch src src/__tests__/debug --exec babel-node --inspect\"\n  },\n  \"homepage\": \"https://github.com/tobkle/create-graphql-server-query-arguments#readme\",\n  \"devDependencies\": {\n    \"assert\": \"^1.4.1\",\n    \"babel-cli\": \"6.24.1\",\n    \"babel-eslint\": \"7.2.3\",\n    \"babel-plugin-syntax-async-functions\": \"6.13.0\",\n    \"babel-plugin-syntax-async-generators\": \"6.13.0\",\n    \"babel-plugin-transform-class-properties\": \"6.24.1\",\n    \"babel-plugin-transform-flow-strip-types\": \"6.22.0\",\n    \"babel-plugin-transform-object-rest-spread\": \"6.23.0\",\n    \"babel-preset-env\": \"^1.5.2\",\n    \"bson-objectid\": \"^1.1.5\",\n    \"chai\": \"4.1.1\",\n    \"chai-fs\": \"^1.0.0\",\n    \"chai-json-equal\": \"0.0.1\",\n    \"chai-spies-next\": \"^0.8.0\",\n    \"chai-string\": \"^1.4.0\",\n    \"chai-subset\": \"1.5.0\",\n    \"coveralls\": \"^2.13.1\",\n    \"create-graphql-server-authorization\": \"^0.0.42\",\n    \"cross-env\": \"^5.0.5\",\n    \"dataloader\": \"^1.3.0\",\n    \"esdoc\": \"^1.0.1\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-flow-type-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.5.0\",\n    \"eslint-config-prettier\": \"^2.3.0\",\n    \"eslint-config-react-app\": \"^2.0.0\",\n    \"eslint-plugin-babel\": \"4.1.2\",\n    \"eslint-plugin-flowtype\": \"2.35.0\",\n    \"eslint-plugin-import\": \"^2.7.0\",\n    \"eslint-plugin-prettier\": \"^2.1.2\",\n    \"eslint-plugin-react\": \"^7.3.0\",\n    \"flow-bin\": \"0.52.0\",\n    \"isparta\": \"4.0.0\",\n    \"mocha\": \"3.5.0\",\n    \"mocha-lcov-reporter\": \"^1.3.0\",\n    \"mongo-mock\": \"^2.4.1\",\n    \"prettier\": \"^1.5.3\",\n    \"sane\": \"2.0.0\"\n  },\n  \"dependencies\": {\n    \"global\": \"^4.3.2\",\n    \"graphql\": \"^0.11.2\",\n    \"iterall\": \"^1.1.0\",\n    \"lodash\": \"4.16.4\",\n    \"lodash.clonedeep\": \"^4.5.0\",\n    \"lodash.includes\": \"^4.3.0\",\n    \"lodash.isarraylike\": \"^4.2.0\",\n    \"lodash.isobject\": \"^3.0.2\",\n    \"lodash.merge\": \"^4.6.0\",\n    \"mongodb\": \"^2.2.31\"\n  }\n}\n",
    "longname": "/Users/Toby/MICRO/create-graphql-server-query-arguments/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]